@page "/RegisterNewAdmin"
@using XmlCore.Client.Services
@using XmlCore.Shared.Entities
@using XmlCore.Shared.Interface

@inject IUserInterface<User> adminUserService
@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager
@inject UserManager UserManager
@rendermode InteractiveServer

<PageTitle>Register</PageTitle>

<div class="welcome-Background">
    
    <div class="top-row px-4 navTop" style="display: flex; gap: 10px; background-color: transparent;">

        <Button class="glow-green-on-hover" Color="Color.Dark" Type="ButtonType.Submit" Style="color:blueviolet" Size="Size.Default" @onclick="GoBack"> Go Back</Button>

        <Button class=" glow-red-on-hover" Color="Color.Dark" Type="ButtonType.Submit" Style="color:blueviolet" Size="Size.Default" @onclick="LogOut"> Logout</Button>

    </div>
    <div class="col-md-4 mx-auto">
        
        <h3>Register New Admin</h3>
        <div>
            <section>
                <EditForm FormName="CreateAdmin" Model="newUser" OnValidSubmit="Register">
                    <DataAnnotationsValidator/>

                    <div>
                        <label for="adminName">Name:</label>
                        <InputText id="adminName" class="form-control" @bind-Value="newUser.Name" placeholder="Put your name here."/>
                    </div>
                    <div>
                        <label for="adminSurname">Surname:</label>
                        <InputText id="adminSurname" class="form-control" @bind-Value="newUser.Surname" placeholder="Put your Surname here."/>
                    </div>
                    <div>
                        <label for="adminEmail">Email:</label>
                        <InputText id="adminEmail" class="form-control" @bind-Value="newUser.Email" placeholder="Register emailaddress here."/>
                    </div>
                    <div>
                        <label for="adminPassword">Password:</label>
                        <InputText id="adminPassword" class="form-control" @bind-Value="newUser.Password" placeholder="Create Password here."/>
                    </div>
                    <Button Type="ButtonType.Submit" class="glow-on-hover btn-margin">Register</Button>
                </EditForm>
            </section>
        </div>
        <Divider></Divider>
        <div>
        </div>


        <section>


            <div class="col-md-8 mx-auto">
                @foreach (var admin in userList)
                {
                    <h2>Administrator</h2>

                    <Card class="card-margin card-visual">
                        <CardHeader class="card-header">Administrator: @admin.Name @admin.Surname</CardHeader>

                        <CardBody TextColor="TextColor.Black50" TextWeight="TextWeight.Bold">

                            <CardText>
                                <li>Email: @admin.Email</li>
                                <li>Password: @admin.Password</li>
                            </CardText>

                        </CardBody>
                    </Card>

                }
            </div>
        </section>
    </div>

</div>




@code {

    private User newUser { get; set; } = new User();

    private List<User> userList { get; set; } = new List<User>();
    

    protected override async Task OnInitializedAsync()
    {
        userList.AddRange(await adminUserService.GetAllAsync());

    }

    #region Button Redirection

    private async void GoBack()
    {

        MethodToRedirectToAdminFrontPage();
        StateHasChanged();

    }

    void MethodToRedirectToAdminFrontPage()
    {
        NavigationManager.NavigateTo("/AdminFrontPage", false);
        StateHasChanged();

    }
    private async void LogOut()
    {

        UserManager.Clear();
        MethodToRedirectToLogin();
        StateHasChanged();

    }




    void MethodToRedirectToLogin()
    {

        NavigationManager.NavigateTo("/LoginPage", false);
        StateHasChanged();

    }


    #endregion

    



    private async void Register()
    {
        if (newUser is null)
        {
            return;
        }

        if (userList.Any(u => u.Email.Equals(newUser.Email)))
        {
            await ShowMessage("This Email already exists. Choose a new one.");
            return;
        }

        if (userList.Any(u => u.Name.ToLower().Equals(newUser.Name.ToLower())
                              &&
                              userList.Any(u => u.Surname.ToLower().Equals(newUser.Surname.ToLower()))))
        {
            await ShowMessage("This combination of Name already exists. Choose a new one.");
            return;
        }

        await adminUserService.CreateAsync(newUser);
        userList.Clear();
        userList.AddRange(await adminUserService.GetAllAsync());
        StateHasChanged();
    }




    private async Task ShowMessage(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
}